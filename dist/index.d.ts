/** Declaration file generated by dts-gen */

export function roundNumberUsingRule(input: any, businessData: any, noCommas: any): any;

export namespace Booking {
  function calendarBookingTime(businessData: any, busySlots: any, slotSize: any, day: any, isGT: any): any;

  function calendarBookingTimeCRAC(cracDays: any, businessData: any, taxonomy: any, day: any): any;

}

export namespace BusySlots {
  function alignmentBusySlotsByTaxonomyDuration(startDate: any, taxonomyDuration: any, slotSize: any, busySlots: any): void;

  function calculateDaySlotsV1(day: any, taxonomy: any, slotSize: any, busySlots: any, businessData: any): any;

  function calculateDaySlotsV2(day: any, taxonomy: any, slotSize: any, busySlots: any): any;

  function checkDate(slots: any, date: any, defaultStep: any): any;

  function checkSlotInterval(dayBusySlots: any, date: any, defaultStep: any): any;

  function isBusyDay(day: any, crunchv2: any, taxonomy: any, slotSize: any, busySlots: any, businessData: any): any;

  function isDateForbidden(widgetConfiguration: any, date: any, ignoreStartDate: any): any;

}

export namespace Crac {
  function cracValueToBits(value: any): any;

  function prepareSlots(cracResult: any, business: any, taxonomies: any, resources: any, taxonomiesRooms: any): any;

  function setAnd(setA: any, setB: any): any;

  function setSlotSize(slotSize: any): void;

  function setUnion(setA: any, setB: any): any;

  function toBusySlots(cracSlots: any, business: any, taxonomyIDs: any, ...args: any[]): any;

}

export namespace CracUtils {
  function calcCRACSlotIntermediate(slot: any, vectorSlotSize: any): any;

}

export namespace DateTime {
  function alignSlotTime(startTime: any, slotSize: any, m: any, isMoment: any): any;

  function alignTimeByQuantum(minutes: any, quantum: any): any;

  function applyMinBookingTime(date: any, businessData: any): any;

  function businessTimezoneUtcOffset(businessData: any): any;

  function busySlotsInterval(date: any, businessData: any, daysToFetch: any): any;

  function getBusinessDateLikeUTC(date: any, businessData: any): any;

  function getDateLikeUTC(date: any): any;

  function setBusinessDateTZ(businessData: any, date: any): any;

  function startBusinessTZDay(businessData: any, utcDate: any): any;

}

export namespace Discounts {
  function getServiceActiveDiscounts(service: any, startTime: any): any;

  function getServiceDiscount(service: any, time: any): any;

  function getServiceDiscountsAndExceptions(bData: any, service: any, time: any, campaignProvider: any): any;

}

export namespace Resources {
  function clearHiddenResources(resources: any, businessData: any, options: any): any;

  function filterWorkersByTaxonomies(businessData: any, services: any, options: any): any;

  function prepareWorkers($scope: any, workers: any, cabinets: any, options: any): any;

}

export namespace Schedule {
  class CRACResourcesAndRoomsResponse {
    constructor(cracData: any);

    prepare(cracData: any): any;

  }

  class CRACResourcesAndRoomsSlot {
    constructor(cracSlot: any);

    getResourceBitset(resourceID: any): any;

    getResourceUnionBitset(): any;

    prepare(cracSlot: any): void;

  }

  class ScheduleBusySlotsCutter {
    constructor(...args: any[]);

    initialize(businessData: any, busySlots: any, serviceId: any, worker: any, currentService: any, multiServices: any, isGT: any): void;

  }

  class ScheduleBusySlotsCutterV1 {
    constructor(businessData: any, busySlots: any, serviceId: any, worker: any, currentService: any, multiServices: any);

    cutSlots(busySlotsDay: any, now: any): any;

  }

  class ScheduleBusySlotsCutterV2 {
    constructor(businessData: any, busySlots: any, serviceId: any, worker: any, currentService: any, multiServices: any, logedInProfile: any, appointmentCount: any);

    cutSlots(busySlotsDay: any, now: any): any;

  }

  class ScheduleCRACDaySlots {
    constructor(cracDay: any, businessNow: any, ...args: any[]);

    cutSlots(resourceID: any, duration: any, slotSize: any, ...args: any[]): any;

    getSlotsIterator(resourceID: any, duration: any, slotSize: any, ...args: any[]): any;

    isDayBefore(): any;

    isThisDay(): any;

  }

  class ScheduleCracSlotsIterator {
    constructor(bitset: any, vectorSlotSize: any, duration: any, scheduleSlotSize: any, ...args: any[]);

    createSlot(start: any, available: any): any;

    isSlotAvailable(): any;

    nextSlot(): any;

    static createSlot(start: any, duration: any, available: any): any;

  }

  class ScheduleDay {
    constructor();

    getSlots(): void;

    isDayAvailable(): void;

  }

  class ScheduleSlotsDay {
    constructor(slots: any);

    getSlots(): any;

    isDayAvailable(): any;

  }

  class ScheduleSlotsIterator {
    constructor();

    isSlotAvailable(): void;

    nextSlot(): void;

  }

  function GCD(A: any): any;

  function cutSlots(iterator: any): any;

  function cutSlotsWithoutBusy(iterator: any): any;

  function cutSlotsWithoutStartBusy(iterator: any): any;

  function cutSlotsWithoutStartFinishBusy(iterator: any): any;

  function getSlotsFromBusinessAndCRAC(cracDay: any, business: any, taxonomy: any, worker: any, enhanceSlotFn: any): any;

  function getSlotsFromBusinessAndCRACMultiServices(cracDay: any, business: any, multiServices: any, worker: any, enhanceSlotFn: any): any;

  function getSlotsFromBusinessAndCRACWithAdjacent(cracDay: any, business: any, resourceId: any, slotSize: any, enhanceSlotFn: any, resourceList: any, taxonomy: any): any;

  function getSlotsFromBusinessAndCRACWithDuration(cracDay: any, business: any, workerID: any, taxDuration: any, enhanceSlotFn: any): any;

  function prepareSlots(cracResult: any, business: any, taxonomyIDs: any, resourceIDs: any, taxonomiesRooms: any): any;

  function setSlotSize(slotSize: any): void;

  function toBusySlots(cracSlots: any, business: any, taxonomyIDs: any, ...args: any[]): any;

}

export namespace SortedWorkers {
  class MostFreeWeightIndex {
    constructor(cracData: any);

    static ZeroDate: string;

  }

  class WeightIndex {
    constructor(data: any);

    getIndex(): any;

    resetIndex(data: any): void;

  }

  class WorkloadWeightIndex {
    constructor(cracData: any, dir: any);

  }

  function getSortedWorkers(workers: any, index: any): any;

}

export namespace Taxonomies {
  function findMinResourceServiceDuration(taxonomies: any, resources: any): any;

  function getMinServiceDuration(taxonomies: any, res: any): any;

  function getServiceDuration(taxonomy: any, resource: any): any;

  function setupChildishnes(taxonomies: any, resources: any): any;

}

export namespace langUtils {
  function getCountryLang(country: any): any;

  function getLangCode(lang: any): any;

}

export namespace phoneUtils {
  function getCountryPhoneDigits(country: any): any;

  function getCountryPhoneSettings(countryCode: any): any;

  function getPhone(business: any, phoneString: any): any;

  function getPhoneData(countryCode: any): any;

  function getPhoneSettings(business: any, options: any): any;

  function getPhoneSettingsPhone(phoneSettings: any, phoneString: any): any;

  function getPhoneString(business: any, obj: any): any;

  function isValidPhone(parsedPhone: any): any;

}

export namespace taxonomies {
  function findMinResourceServiceDuration(taxonomies: any, resources: any): any;

  function getMinServiceDuration(taxonomies: any, res: any): any;

  function getServiceDuration(taxonomy: any, resource: any): any;

  function setupChildishnes(taxonomies: any, resources: any): any;

}
